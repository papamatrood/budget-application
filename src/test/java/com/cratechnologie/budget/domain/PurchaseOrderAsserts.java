package com.cratechnologie.budget.domain;

import static com.cratechnologie.budget.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PurchaseOrderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseOrderAllPropertiesEquals(PurchaseOrder expected, PurchaseOrder actual) {
        assertPurchaseOrderAutoGeneratedPropertiesEquals(expected, actual);
        assertPurchaseOrderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseOrderAllUpdatablePropertiesEquals(PurchaseOrder expected, PurchaseOrder actual) {
        assertPurchaseOrderUpdatableFieldsEquals(expected, actual);
        assertPurchaseOrderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseOrderAutoGeneratedPropertiesEquals(PurchaseOrder expected, PurchaseOrder actual) {
        assertThat(actual)
            .as("Verify PurchaseOrder auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseOrderUpdatableFieldsEquals(PurchaseOrder expected, PurchaseOrder actual) {
        assertThat(actual)
            .as("Verify PurchaseOrder relevant properties")
            .satisfies(a -> assertThat(a.getNameOfTheMinistry()).as("check nameOfTheMinistry").isEqualTo(expected.getNameOfTheMinistry()))
            .satisfies(a -> assertThat(a.getOrderNumber()).as("check orderNumber").isEqualTo(expected.getOrderNumber()))
            .satisfies(a -> assertThat(a.getOrderDate()).as("check orderDate").isEqualTo(expected.getOrderDate()))
            .satisfies(a ->
                assertThat(a.getTotalAmountWithoutTax())
                    .as("check totalAmountWithoutTax")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalAmountWithoutTax())
            )
            .satisfies(a ->
                assertThat(a.getTaxRate()).as("check taxRate").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTaxRate())
            )
            .satisfies(a ->
                assertThat(a.getTotalTaxAmount())
                    .as("check totalTaxAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalTaxAmount())
            )
            .satisfies(a ->
                assertThat(a.getPrepaidTaxAmount())
                    .as("check prepaidTaxAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPrepaidTaxAmount())
            )
            .satisfies(a ->
                assertThat(a.getTotalAmountWithTax())
                    .as("check totalAmountWithTax")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalAmountWithTax())
            )
            .satisfies(a ->
                assertThat(a.getAuthExpenditureNumber()).as("check authExpenditureNumber").isEqualTo(expected.getAuthExpenditureNumber())
            )
            .satisfies(a ->
                assertThat(a.getAllocatedCredits())
                    .as("check allocatedCredits")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getAllocatedCredits())
            )
            .satisfies(a ->
                assertThat(a.getCommittedExpenditures())
                    .as("check committedExpenditures")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getCommittedExpenditures())
            )
            .satisfies(a ->
                assertThat(a.getAvailableBalance())
                    .as("check availableBalance")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getAvailableBalance())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseOrderUpdatableRelationshipsEquals(PurchaseOrder expected, PurchaseOrder actual) {
        assertThat(actual)
            .as("Verify PurchaseOrder relationships")
            .satisfies(a -> assertThat(a.getAnnexDecision()).as("check annexDecision").isEqualTo(expected.getAnnexDecision()))
            .satisfies(a -> assertThat(a.getSupplier()).as("check supplier").isEqualTo(expected.getSupplier()))
            .satisfies(a -> assertThat(a.getEngagement()).as("check engagement").isEqualTo(expected.getEngagement()));
    }
}
