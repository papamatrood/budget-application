package com.cratechnologie.budget.domain;

import static com.cratechnologie.budget.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class DecisionItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDecisionItemAllPropertiesEquals(DecisionItem expected, DecisionItem actual) {
        assertDecisionItemAutoGeneratedPropertiesEquals(expected, actual);
        assertDecisionItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDecisionItemAllUpdatablePropertiesEquals(DecisionItem expected, DecisionItem actual) {
        assertDecisionItemUpdatableFieldsEquals(expected, actual);
        assertDecisionItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDecisionItemAutoGeneratedPropertiesEquals(DecisionItem expected, DecisionItem actual) {
        assertThat(actual)
            .as("Verify DecisionItem auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDecisionItemUpdatableFieldsEquals(DecisionItem expected, DecisionItem actual) {
        assertThat(actual)
            .as("Verify DecisionItem relevant properties")
            .satisfies(a -> assertThat(a.getBeneficiary()).as("check beneficiary").isEqualTo(expected.getBeneficiary()))
            .satisfies(a -> assertThat(a.getAmount()).as("check amount").isEqualTo(expected.getAmount()))
            .satisfies(a ->
                assertThat(a.getObservation())
                    .as("check observation")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getObservation())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDecisionItemUpdatableRelationshipsEquals(DecisionItem expected, DecisionItem actual) {
        assertThat(actual)
            .as("Verify DecisionItem relationships")
            .satisfies(a -> assertThat(a.getDecision()).as("check decision").isEqualTo(expected.getDecision()));
    }
}
