package com.cratechnologie.budget.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AppUserAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserAllPropertiesEquals(AppUser expected, AppUser actual) {
        assertAppUserAutoGeneratedPropertiesEquals(expected, actual);
        assertAppUserAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserAllUpdatablePropertiesEquals(AppUser expected, AppUser actual) {
        assertAppUserUpdatableFieldsEquals(expected, actual);
        assertAppUserUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserAutoGeneratedPropertiesEquals(AppUser expected, AppUser actual) {
        assertThat(actual)
            .as("Verify AppUser auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserUpdatableFieldsEquals(AppUser expected, AppUser actual) {
        assertThat(actual)
            .as("Verify AppUser relevant properties")
            .satisfies(a -> assertThat(a.getAccountStatus()).as("check accountStatus").isEqualTo(expected.getAccountStatus()))
            .satisfies(a -> assertThat(a.getLastDateUpdate()).as("check lastDateUpdate").isEqualTo(expected.getLastDateUpdate()))
            .satisfies(a -> assertThat(a.getDateCreated()).as("check dateCreated").isEqualTo(expected.getDateCreated()))
            .satisfies(a -> assertThat(a.getFirstname()).as("check firstname").isEqualTo(expected.getFirstname()))
            .satisfies(a -> assertThat(a.getLastname()).as("check lastname").isEqualTo(expected.getLastname()))
            .satisfies(a -> assertThat(a.getPhoneNumber()).as("check phoneNumber").isEqualTo(expected.getPhoneNumber()))
            .satisfies(a -> assertThat(a.getBirthDate()).as("check birthDate").isEqualTo(expected.getBirthDate()))
            .satisfies(a -> assertThat(a.getBirthPlace()).as("check birthPlace").isEqualTo(expected.getBirthPlace()))
            .satisfies(a -> assertThat(a.getGender()).as("check gender").isEqualTo(expected.getGender()))
            .satisfies(a -> assertThat(a.getFamilySituation()).as("check familySituation").isEqualTo(expected.getFamilySituation()))
            .satisfies(a -> assertThat(a.getPosition()).as("check position").isEqualTo(expected.getPosition()))
            .satisfies(a -> assertThat(a.getAddress()).as("check address").isEqualTo(expected.getAddress()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppUserUpdatableRelationshipsEquals(AppUser expected, AppUser actual) {
        // empty method
    }
}
