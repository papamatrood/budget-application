package com.cratechnologie.budget.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EngagementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEngagementAllPropertiesEquals(Engagement expected, Engagement actual) {
        assertEngagementAutoGeneratedPropertiesEquals(expected, actual);
        assertEngagementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEngagementAllUpdatablePropertiesEquals(Engagement expected, Engagement actual) {
        assertEngagementUpdatableFieldsEquals(expected, actual);
        assertEngagementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEngagementAutoGeneratedPropertiesEquals(Engagement expected, Engagement actual) {
        assertThat(actual)
            .as("Verify Engagement auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEngagementUpdatableFieldsEquals(Engagement expected, Engagement actual) {
        assertThat(actual)
            .as("Verify Engagement relevant properties")
            .satisfies(a -> assertThat(a.getEngagementNumber()).as("check engagementNumber").isEqualTo(expected.getEngagementNumber()))
            .satisfies(a -> assertThat(a.getEngagementDate()).as("check engagementDate").isEqualTo(expected.getEngagementDate()))
            .satisfies(a -> assertThat(a.getObjectOfExpense()).as("check objectOfExpense").isEqualTo(expected.getObjectOfExpense()))
            .satisfies(a -> assertThat(a.getNotifiedCredits()).as("check notifiedCredits").isEqualTo(expected.getNotifiedCredits()))
            .satisfies(a -> assertThat(a.getCreditCommitted()).as("check creditCommitted").isEqualTo(expected.getCreditCommitted()))
            .satisfies(a -> assertThat(a.getCreditsAvailable()).as("check creditsAvailable").isEqualTo(expected.getCreditsAvailable()))
            .satisfies(a ->
                assertThat(a.getAmountProposedCommitment())
                    .as("check amountProposedCommitment")
                    .isEqualTo(expected.getAmountProposedCommitment())
            )
            .satisfies(a -> assertThat(a.getHeadDaf()).as("check headDaf").isEqualTo(expected.getHeadDaf()))
            .satisfies(a ->
                assertThat(a.getFinancialController()).as("check financialController").isEqualTo(expected.getFinancialController())
            )
            .satisfies(a -> assertThat(a.getGeneralManager()).as("check generalManager").isEqualTo(expected.getGeneralManager()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEngagementUpdatableRelationshipsEquals(Engagement expected, Engagement actual) {
        // empty method
    }
}
