package com.cratechnologie.budget.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DecisionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDecisionAllPropertiesEquals(Decision expected, Decision actual) {
        assertDecisionAutoGeneratedPropertiesEquals(expected, actual);
        assertDecisionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDecisionAllUpdatablePropertiesEquals(Decision expected, Decision actual) {
        assertDecisionUpdatableFieldsEquals(expected, actual);
        assertDecisionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDecisionAutoGeneratedPropertiesEquals(Decision expected, Decision actual) {
        assertThat(actual)
            .as("Verify Decision auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDecisionUpdatableFieldsEquals(Decision expected, Decision actual) {
        assertThat(actual)
            .as("Verify Decision relevant properties")
            .satisfies(a -> assertThat(a.getDecisionNumber()).as("check decisionNumber").isEqualTo(expected.getDecisionNumber()))
            .satisfies(a -> assertThat(a.getDecisionDate()).as("check decisionDate").isEqualTo(expected.getDecisionDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDecisionUpdatableRelationshipsEquals(Decision expected, Decision actual) {
        assertThat(actual)
            .as("Verify Decision relationships")
            .satisfies(a -> assertThat(a.getEngagement()).as("check engagement").isEqualTo(expected.getEngagement()))
            .satisfies(a -> assertThat(a.getAnnexDecision()).as("check annexDecision").isEqualTo(expected.getAnnexDecision()));
    }
}
