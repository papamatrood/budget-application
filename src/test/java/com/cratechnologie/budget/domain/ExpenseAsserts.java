package com.cratechnologie.budget.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ExpenseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseAllPropertiesEquals(Expense expected, Expense actual) {
        assertExpenseAutoGeneratedPropertiesEquals(expected, actual);
        assertExpenseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseAllUpdatablePropertiesEquals(Expense expected, Expense actual) {
        assertExpenseUpdatableFieldsEquals(expected, actual);
        assertExpenseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseAutoGeneratedPropertiesEquals(Expense expected, Expense actual) {
        assertThat(actual)
            .as("Verify Expense auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseUpdatableFieldsEquals(Expense expected, Expense actual) {
        assertThat(actual)
            .as("Verify Expense relevant properties")
            .satisfies(a ->
                assertThat(a.getAchievementsInThePastYear())
                    .as("check achievementsInThePastYear")
                    .isEqualTo(expected.getAchievementsInThePastYear())
            )
            .satisfies(a -> assertThat(a.getNewYearForecast()).as("check newYearForecast").isEqualTo(expected.getNewYearForecast()))
            .satisfies(a -> assertThat(a.getCategory()).as("check category").isEqualTo(expected.getCategory()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseUpdatableRelationshipsEquals(Expense expected, Expense actual) {
        assertThat(actual)
            .as("Verify Expense relationships")
            .satisfies(a -> assertThat(a.getAnnexDecision()).as("check annexDecision").isEqualTo(expected.getAnnexDecision()))
            .satisfies(a -> assertThat(a.getFinancialYear()).as("check financialYear").isEqualTo(expected.getFinancialYear()))
            .satisfies(a -> assertThat(a.getArticles()).as("check articles").isEqualTo(expected.getArticles()));
    }
}
