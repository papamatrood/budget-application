package com.cratechnologie.budget.domain;

import static com.cratechnologie.budget.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PurchaseOrderItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseOrderItemAllPropertiesEquals(PurchaseOrderItem expected, PurchaseOrderItem actual) {
        assertPurchaseOrderItemAutoGeneratedPropertiesEquals(expected, actual);
        assertPurchaseOrderItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseOrderItemAllUpdatablePropertiesEquals(PurchaseOrderItem expected, PurchaseOrderItem actual) {
        assertPurchaseOrderItemUpdatableFieldsEquals(expected, actual);
        assertPurchaseOrderItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseOrderItemAutoGeneratedPropertiesEquals(PurchaseOrderItem expected, PurchaseOrderItem actual) {
        assertThat(actual)
            .as("Verify PurchaseOrderItem auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseOrderItemUpdatableFieldsEquals(PurchaseOrderItem expected, PurchaseOrderItem actual) {
        assertThat(actual)
            .as("Verify PurchaseOrderItem relevant properties")
            .satisfies(a -> assertThat(a.getProductName()).as("check productName").isEqualTo(expected.getProductName()))
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a ->
                assertThat(a.getUnitPrice()).as("check unitPrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getUnitPrice())
            )
            .satisfies(a ->
                assertThat(a.getTotalAmount())
                    .as("check totalAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalAmount())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseOrderItemUpdatableRelationshipsEquals(PurchaseOrderItem expected, PurchaseOrderItem actual) {
        assertThat(actual)
            .as("Verify PurchaseOrderItem relationships")
            .satisfies(a -> assertThat(a.getPurchaseOrder()).as("check purchaseOrder").isEqualTo(expected.getPurchaseOrder()));
    }
}
